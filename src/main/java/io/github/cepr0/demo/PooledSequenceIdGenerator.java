package io.github.cepr0.demo;

import com.sun.corba.se.spi.ior.Identifiable;
import org.hibernate.MappingException;
import org.hibernate.Session;
import org.hibernate.engine.spi.SharedSessionContractImplementor;
import org.hibernate.id.enhanced.SequenceStyleGenerator;
import org.hibernate.internal.util.config.ConfigurationHelper;
import org.hibernate.service.ServiceRegistry;
import org.hibernate.type.Type;

import java.io.Serializable;
import java.util.Properties;
import java.util.function.BiFunction;

/**
 * create table model2(
 * ID NUMBER(19) GENERATED BY DEFAULT AS IDENTITY INCREMENT BY 3,
 * numberr number (10),
 * primary key(id)
 * );
 */
public class PooledSequenceIdGenerator extends SequenceStyleGenerator {
    public static final String TARGET_TABLE = "target_table";
    private String sequenceName = null;
    private String sequenceSql = null;

    private int paramIncrementSize;
    private int counter;
    private long currentSequenceValue;

    private boolean notInitialized = true;
    private String paramTargetTable;

    BiFunction<SharedSessionContractImplementor, Object, Serializable> generateMethod;

    @Override
    public void configure(Type type, Properties params, ServiceRegistry serviceRegistry) throws MappingException {
        super.configure(type, params, serviceRegistry);
        paramIncrementSize = determineIncrementSize(params);
        paramTargetTable = ConfigurationHelper.getString(TARGET_TABLE, params).toUpperCase();
        checkH2();
    }

    private void checkH2() {
        Class h2Class = null;
        try {
            h2Class = Class.forName("org.h2.Driver");
        } catch (ClassNotFoundException e) {
        }
        if (h2Class != null) {
            generateMethod = (
                    SharedSessionContractImplementor session,
                    Object obj) -> {
                return super.generate(session, obj);
            };
        } else {
            generateMethod = this::doGenerate;
        }
    }

    @Override
    public Serializable generate(
            SharedSessionContractImplementor session,
            Object obj) {
        return generateMethod.apply(session, obj);
    }

    public Serializable doGenerate(
            SharedSessionContractImplementor session,
            Object obj) {

        if (obj instanceof Identifiable) {
            Identifiable identifiable = (Identifiable) obj;
            Serializable id = identifiable.getId();

            if (id != null) {
                return id;
            }
        }

        Session hibernateSession = Session.class.cast(session);

        if (notInitialized) {
            notInitialized = false;
            counter = 1;
            findSequenceName(hibernateSession);
            buildNextValueSQL();
            currentSequenceValue = nextVal(hibernateSession);
            if (currentSequenceValue < paramIncrementSize) {
                counter = paramIncrementSize + 1;
                return currentSequenceValue;
            }
        }
        long sequenceValue;
        if (counter > paramIncrementSize) {
            currentSequenceValue = nextVal(hibernateSession);
            counter = 1;
        }
        sequenceValue = currentSequenceValue - (paramIncrementSize - counter);
        counter++;


        return sequenceValue;
    }

    private void buildNextValueSQL() {
        sequenceSql = "select " + sequenceName + " from dual";
    }

    private void findSequenceName(Session hibernateSession) {
        sequenceName = hibernateSession
                .createNativeQuery("SELECT data_default " +
                        "FROM all_tab_columns " +
                        "WHERE owner = user " +
                        "   AND table_name = '" + paramTargetTable + "' " +
                        "   AND identity_column = 'YES'")
                .uniqueResult().toString();
    }


    private long nextVal(Session hibernateSession) {
        return ((Number) hibernateSession
                .createNativeQuery(sequenceSql)
                .uniqueResult()).longValue();
    }

}
