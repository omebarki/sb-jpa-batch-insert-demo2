package io.github.cepr0.demo;

import org.hibernate.MappingException;
import org.hibernate.Session;
import org.hibernate.engine.spi.SharedSessionContractImplementor;
import org.hibernate.id.enhanced.SequenceStructure;
import org.hibernate.id.enhanced.SequenceStyleGenerator;
import org.hibernate.internal.util.config.ConfigurationHelper;
import org.hibernate.service.ServiceRegistry;
import org.hibernate.type.Type;

import java.io.Serializable;
import java.lang.reflect.Field;
import java.util.Properties;
import java.util.function.BiFunction;

/**
 * create table model2(
 * ID NUMBER(19) GENERATED BY DEFAULT AS IDENTITY INCREMENT BY 3,
 * numberr number (10),
 * primary key(id)
 * );
 */
public class PooledSequenceIdGenerator extends SequenceStyleGenerator {
    private static final String SQL_FIELD = "sql";
    private static final String TARGET_TABLE = "target_table";
    private static final String DATABASE_STRUCTURE_FIELD = "databaseStructure";

    private boolean notInitialized = true;
    private String paramTargetTable;

    BiFunction<SharedSessionContractImplementor, Object, Serializable> generateMethod;

    @Override
    public void configure(Type type, Properties params, ServiceRegistry serviceRegistry) throws MappingException {
        super.configure(type, params, serviceRegistry);
        paramTargetTable = ConfigurationHelper.getString(TARGET_TABLE, params).toUpperCase();
        checkH2();
    }

    private void checkH2() {
        Class<?> h2Class = null;
        try {
            h2Class = Class.forName("org.h2.Driver");
        } catch (ClassNotFoundException e) {
            //ignore
        }
        if (h2Class != null) {
            generateMethod = super::generate;
        } else {
            generateMethod = this::doGenerate;
        }
    }

    @Override
    public Serializable generate(
            SharedSessionContractImplementor session,
            Object obj) {
        return generateMethod.apply(session, obj);
    }

    public Serializable doGenerate(
            SharedSessionContractImplementor session,
            Object obj) {

        if (notInitialized) {
            notInitialized = false;
            Session hibernateSession = (Session) session;
            buildSequenceSQL(hibernateSession);
        }
        return super.generate(session, obj);
    }

    private void buildSequenceSQL(Session hibernateSession) {
        try {
            Class<SequenceStyleGenerator> aClass = SequenceStyleGenerator.class;
            Field databaseStructure = aClass.getDeclaredField(DATABASE_STRUCTURE_FIELD);
            databaseStructure.setAccessible(true);
            SequenceStructure sequenceStructure = (SequenceStructure) databaseStructure.get(this);

            Class<? extends SequenceStructure> sequenceStructureClass = sequenceStructure.getClass();
            Field sql = sequenceStructureClass.getDeclaredField(SQL_FIELD);
            sql.setAccessible(true);
            sql.set(sequenceStructure, buildNextValueSQL(findSequenceName(hibernateSession)));


        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    private String findSequenceName(Session hibernateSession) {
        return hibernateSession
                .createNativeQuery("SELECT data_default " +
                        "FROM user_tab_columns " +
                        "WHERE " +
                        "table_name = '" + paramTargetTable + "' " +
                        "   AND identity_column = 'YES'")
                .uniqueResult().toString();
    }

    private String buildNextValueSQL(String sequenceName) {
        return "select " + sequenceName + " from dual";
    }

}
